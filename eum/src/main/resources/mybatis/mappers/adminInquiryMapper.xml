<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="mapper.adminInquiry">

  <resultMap id="InquiryMap" type="com.myspring.eum.admin.inquiry.vo.InquiryVO">
    <id     property="inquiryId"  column="inquiry_id"/>
    <result property="memberId"   column="member_id"/>
    <result property="title"      column="title"/>
    <result property="content"    column="content"/>
    <result property="status"     column="status"/>
    <result property="adminReply" column="admin_reply"/>
    <result property="createdAt"  column="created_at"/>
    <result property="answeredAt" column="answered_at"/>
  </resultMap>

  <sql id="whereClause">
    <where>
      <if test="status != null and status != ''">
        status = #{status}
      </if>

      <if test="keyword != null and keyword != ''">
        <choose>
          <when test="field == 'member_id'">
            AND member_id LIKE CONCAT('%', #{keyword}, '%')
          </when>
          <when test="field == 'title'">
            AND title LIKE CONCAT('%', #{keyword}, '%')
          </when>
          <otherwise>
            AND (title LIKE CONCAT('%', #{keyword}, '%')
              OR content LIKE CONCAT('%', #{keyword}, '%')
              OR member_id LIKE CONCAT('%', #{keyword}, '%'))
          </otherwise>
        </choose>
      </if>
    </where>
  </sql>

  <sql id="orderBy">
    ORDER BY
    <choose>
      <when test="sort == 'created_at'"> created_at </when>
      <when test="sort == 'answered_at'"> answered_at </when>
      <otherwise> created_at </otherwise>
    </choose>
    <choose>
      <when test="order == 'ASC' or orderDir == 'asc'">ASC</when>
      <otherwise>DESC</otherwise>
    </choose>
  </sql>

  <select id="count" parameterType="com.myspring.eum.common.paging.PageRequest" resultType="long">
    SELECT COUNT(1) FROM inquiry
    <include refid="whereClause"/>
  </select>

  <select id="list" parameterType="com.myspring.eum.common.paging.PageRequest" resultMap="InquiryMap">
    SELECT inquiry_id, member_id, title, content, status, admin_reply, created_at, answered_at
    FROM inquiry
    <include refid="whereClause"/>
    <include refid="orderBy"/>
    LIMIT #{limit} OFFSET #{offset}
  </select>

  <select id="findById" parameterType="long" resultMap="InquiryMap">
    SELECT inquiry_id, member_id, title, content, status, admin_reply, created_at, answered_at
    FROM inquiry
    WHERE inquiry_id = #{id}
  </select>

  <update id="reply" parameterType="map">
    UPDATE inquiry
       SET admin_reply = #{reply},
           status      = 'ANSWERED',
           answered_at = NOW()
     WHERE inquiry_id = #{id}
  </update>

</mapper>
